From f54146fb8579a459b5c57c8688d8e32167913a18 Mon Sep 17 00:00:00 2001
From: maanush2004 <p.maanush@gmail.com>
Date: Tue, 23 Nov 2021 11:34:11 +0000
Subject: [PATCH] build: Add option to append vbmeta image to boot image

* Partially taken from https://github.com/mtk-watch/android_build_make/commit/89d279a7ab1d0249f89c84d53fd4dbd786d19727

* Set MAIN_VBMETA_IN_BOOT=yes for the vbmeta to get appended to boot image

Signed-off-by: Maanush Putcha <p.maanush@gmail.com>
---
 core/Makefile                                 | 33 +++++++++++++++++--
 core/main.mk                                  |  3 +-
 tools/releasetools/add_img_to_target_files.py | 29 ++++++++++++++++
 tools/releasetools/common.py                  | 15 ++++++++-
 4 files changed, 76 insertions(+), 4 deletions(-)

diff --git a/core/Makefile b/core/Makefile
index 136a4d7715..f33c9d601b 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -930,9 +930,11 @@ endif # BUILDING_RAMDISK_IMAGE
 # This is defined here since we may be building recovery as boot
 # below and only want to define this once
 ifneq ($(strip $(BOARD_KERNEL_BINARIES)),)
-  BUILT_BOOTIMAGE_TARGET := $(foreach k,$(subst kernel,boot,$(BOARD_KERNEL_BINARIES)), $(PRODUCT_OUT)/$(k).img)
+  BUILT_BOOTIMAGE_TARGET := $(foreach k,$(subst kernel,boot,$(BOARD_KERNEL_BINARIES)), $(call intermediates-dir-for,PACKAGING,boot)/$(k).img)
+  MTK_BOOTIMAGE_TARGET := $(foreach k,$(subst kernel,boot,$(BOARD_KERNEL_BINARIES)), $(PRODUCT_OUT)/$(k).img)
 else
-  BUILT_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
+  BUILT_BOOTIMAGE_TARGET := $(call intermediates-dir-for,PACKAGING,boot)/boot.img
+  MTK_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
 endif
 
 INTERNAL_PREBUILT_BOOTIMAGE :=
@@ -1234,6 +1236,7 @@ endif # BOARD_AVB_ENABLE
 
 else # BOARD_PREBUILT_BOOTIMAGE not defined
 INSTALLED_BOOTIMAGE_TARGET :=
+MTK_BOOTIMAGE_TARGET :=
 endif # BOARD_PREBUILT_BOOTIMAGE
 endif # TARGET_NO_KERNEL
 endif # my_installed_prebuilt_gki_apex not defined
@@ -4586,6 +4589,23 @@ endif # BUILDING_VBMETA_IMAGE
 
 endif # BOARD_AVB_ENABLE
 
+ifneq ($(strip $(TARGET_NO_KERNEL)),true)
+ifeq (yes, $(strip $(MAIN_VBMETA_IN_BOOT)))
+
+ifeq (true, $(strip $(BOARD_AVB_ENABLE)))
+$(MTK_BOOTIMAGE_TARGET): $(INSTALLED_BOOTIMAGE_TARGET) $(BUILT_VBMETAIMAGE_TARGET) $(AVBTOOL)
+	@echo "Install boot image: $@"
+	$(copy-file-to-target)
+	$(hide) $(AVBTOOL) append_vbmeta_image --image $@ --partition_size $(BOARD_BOOTIMAGE_PARTITION_SIZE) --vbmeta_image $(BUILT_VBMETAIMAGE_TARGET)
+endif
+
+else
+$(MTK_BOOTIMAGE_TARGET): $(INSTALLED_BOOTIMAGE_TARGET)
+	@echo "Install boot image: $@"
+	$(copy-file-to-target)
+endif # MAIN_VBMETA_IN_BOOT
+endif # TARGET_NO_KERNEL
+
 # List of files from all images
 INTERNAL_ALLIMAGES_FILES := \
     $(FULL_SYSTEMIMAGE_DEPS) \
@@ -5268,6 +5288,9 @@ ifneq (,$(strip $(BOARD_CUSTOMIMAGES_PARTITION_LIST)))
 	    echo "avb_$(partition)_partition_size=$(BOARD_AVB_$(call to-upper,$(partition))_PARTITION_SIZE)"  >> $@; \
 	    echo "avb_$(partition)_image_list=$(foreach image,$(BOARD_AVB_$(call to-upper,$(partition))_IMAGE_LIST),$(notdir $(image)))" >> $@;)
 endif # BOARD_CUSTOMIMAGES_PARTITION_LIST
+ifeq (yes, $(strip $(MAIN_VBMETA_IN_BOOT)))
+	$(hide) echo "avb_main_vbmeta_in_boot=true" >> $@
+endif # MAIN_VBMETA_IN_BOOT
 ifneq (,$(strip $(BOARD_AVB_VBMETA_SYSTEM)))
 	$(hide) echo "avb_vbmeta_system=$(BOARD_AVB_VBMETA_SYSTEM)" >> $@
 	$(hide) echo "avb_vbmeta_system_args=$(BOARD_AVB_MAKE_VBMETA_SYSTEM_IMAGE_ARGS)" >> $@
@@ -5661,6 +5684,7 @@ $(BUILT_TARGET_FILES_PACKAGE): \
 	    $(INSTALLED_RECOVERY_KERNEL_TARGET) \
 	    $(INSTALLED_KERNEL_TARGET) \
 	    $(INSTALLED_RAMDISK_TARGET) \
+	    $(MTK_BOOTIMAGE_TARGET) \
 	    $(INSTALLED_DTBIMAGE_TARGET) \
 	    $(INSTALLED_2NDBOOTLOADER_TARGET) \
 	    $(BOARD_PREBUILT_DTBOIMAGE) \
@@ -6100,6 +6124,11 @@ endif
 ifeq ($(BUILD_QEMU_IMAGES),true)
 	$(hide) AVBTOOL=$(AVBTOOL) $(MK_VBMETA_BOOT_KERNEL_CMDLINE_SH) $(zip_root)/IMAGES/vbmeta.img \
 	    $(zip_root)/IMAGES/system.img $(zip_root)/IMAGES/VerifiedBootParams.textproto
+endif
+ifeq (yes, $(strip $(MAIN_VBMETA_IN_BOOT)))
+ifeq (true, $(strip $(BOARD_AVB_ENABLE)))
+	$(hide) $(AVBTOOL) append_vbmeta_image --image $(zip_root)/IMAGES/boot.img --partition_size $(BOARD_BOOTIMAGE_PARTITION_SIZE) --vbmeta_image $(zip_root)/IMAGES/vbmeta.img
+endif
 endif
 	@# Zip everything up, preserving symlinks and placing META/ files first to
 	@# help early validation of the .zip file while uploading it.
diff --git a/core/main.mk b/core/main.mk
index 2abd9d2d65..a59b6c76b1 100644
--- a/core/main.mk
+++ b/core/main.mk
@@ -1576,7 +1576,7 @@ systemotherimage: $(INSTALLED_SYSTEMOTHERIMAGE_TARGET)
 superimage_empty: $(INSTALLED_SUPERIMAGE_EMPTY_TARGET)
 
 .PHONY: bootimage
-bootimage: $(INSTALLED_BOOTIMAGE_TARGET)
+bootimage: $(MTK_BOOTIMAGE_TARGET)
 
 .PHONY: initbootimage
 initbootimage: $(INSTALLED_INIT_BOOT_IMAGE_TARGET)
@@ -1609,6 +1609,7 @@ droidcore-unbundled: $(filter $(HOST_OUT_ROOT)/%,$(modules_to_install)) \
     $(INSTALLED_RAMDISK_TARGET) \
     $(INSTALLED_BOOTIMAGE_TARGET) \
     $(INSTALLED_INIT_BOOT_IMAGE_TARGET) \
+    $(MTK_BOOTIMAGE_TARGET) \
     $(INSTALLED_RADIOIMAGE_TARGET) \
     $(INSTALLED_DEBUG_RAMDISK_TARGET) \
     $(INSTALLED_DEBUG_BOOTIMAGE_TARGET) \
diff --git a/tools/releasetools/add_img_to_target_files.py b/tools/releasetools/add_img_to_target_files.py
index 09f69d0400..8c12e2a9b0 100644
--- a/tools/releasetools/add_img_to_target_files.py
+++ b/tools/releasetools/add_img_to_target_files.py
@@ -508,6 +508,31 @@ def AddUserdata(output_zip):
   # As it's likely huge and consist of lots of 0s.
   img.Write(zipfile.ZIP_DEFLATED)
 
+def AVBSignBoot(output_zip):
+  """Sign the boot image by avbtool.
+  Skip sign the boot image in GetBootableImage for generate recovery
+  patch if main_vbmeta_in_boot is enabled. Sign boot image which is
+  under IMAGES/ and is generated by GetBootableImage.
+  """
+  img = OutputFile(output_zip, OPTIONS.input_tmp, "IMAGES", "boot.img")
+  if os.path.exists(img.name):
+  # AVB-sign the image as needed.
+    avbtool = os.getenv('AVBTOOL') or OPTIONS.info_dict["avb_avbtool"]
+    part_size = OPTIONS.info_dict["boot_size"]
+    # The AVB hash footer will be replaced if already present.
+    cmd = [avbtool, "add_hash_footer", "--image", img.name,
+           "--partition_size", str(part_size), "--partition_name", "boot"]
+    common.AppendAVBSigningArgs(cmd, "boot")
+    args = OPTIONS.info_dict.get("avb_boot_add_hash_footer_args")
+    if args and args.strip():
+      cmd.extend(shlex.split(args))
+    common.RunAndCheckOutput(cmd)
+  else:
+    assert os.path.exists(img.input_name), 'Failed to find boot.img in %s' % (
+        img.input_name)
+
+  img.Write()
+  return img.name
 
 def AddVBMeta(output_zip, partitions, name, needed_partitions):
   """Creates a VBMeta image and stores it in output_zip.
@@ -952,6 +977,10 @@ def add_partition(partition, has_partition, add_func, add_args):
     banner("custom images for " + partition_name)
     partitions[partition_name] = AddCustomImages(output_zip, partition_name)
 
+  if OPTIONS.info_dict.get("avb_main_vbmeta_in_boot") == "true":
+    banner("main_vbmeta_in_boot")
+    partitions['boot'] = AVBSignBoot(output_zip)
+
   if OPTIONS.info_dict.get("avb_enable") == "true":
     # vbmeta_partitions includes the partitions that should be included into
     # top-level vbmeta.img, which are the ones that are not included in any
diff --git a/tools/releasetools/common.py b/tools/releasetools/common.py
index c84c181e75..5f3daef9e8 100644
--- a/tools/releasetools/common.py
+++ b/tools/releasetools/common.py
@@ -1724,7 +1724,7 @@ def _BuildBootableImage(image_name, sourcedir, fs_config_file, info_dict=None,
     img_keyblock.close()
 
   # AVB: if enabled, calculate and add hash to boot.img or recovery.img.
-  if info_dict.get("avb_enable") == "true":
+  if info_dict.get("avb_enable") == "true" and info_dict.get("avb_main_vbmeta_in_boot") != "true":
     avbtool = info_dict["avb_avbtool"]
     if partition_name == "recovery":
       part_size = info_dict["recovery_size"]
@@ -1739,6 +1739,19 @@ def _BuildBootableImage(image_name, sourcedir, fs_config_file, info_dict=None,
       cmd.extend(shlex.split(args))
     RunAndCheckOutput(cmd)
 
+  # AVB: if vbmeta needs to be appended to boot, only add hash to recovery.img
+  if info_dict.get("avb_enable") == "true" and info_dict.get("avb_main_vbmeta_in_boot") == "true":
+    avbtool = info_dict["avb_avbtool"]
+    part_size = info_dict["recovery_size"]
+    cmd = [avbtool, "add_hash_footer", "--image", img.name,
+           "--partition_size", str(part_size), "--partition_name",
+           "recovery"]
+    AppendAVBSigningArgs(cmd, "recovery")
+    args = info_dict.get("avb_recovery_add_hash_footer_args")
+    if args and args.strip():
+      cmd.extend(shlex.split(args))
+    RunAndCheckOutput(cmd)
+
   img.seek(os.SEEK_SET, 0)
   data = img.read()
 
-- 
2.17.1
